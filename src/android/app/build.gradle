apply plugin: 'com.android.application'

// Application name variables
def appName = new XmlSlurper().parse(file('src/main/AndroidManifest.xml')).@package.text()
def apkName = appName.toString().split('\\.').last()

def platform = "mac"
if (System.properties['os.name'].toLowerCase().contains('windows'))
{
    platform = "win"
}

// Paths used throughout the build process
def coronaNativeDir = System.getProperty("user.home") + "/Library/Application Support/Corona/Native"
if (platform == "win")
{
    coronaNativeDir = System.getenv("CORONA_ROOT")
}

// Check to see if Corona Native has been properly setup
def coronaNativeDirObj = new File(coronaNativeDir)
if( ! coronaNativeDirObj.exists() ) {
  throw new GradleException("error: Corona Native has not been setup.  Run 'Native/SetupCoronaNative.app' in your Corona install to set it up")
}

def assetsDir = "$projectDir/src/main/assets"
def jniLibsDir = "$projectDir/src/main/jniLibs"
def coronaNativeSharedDir = "$coronaNativeDir/Corona/shared"
def coronaNativeAndroidLibDir = "$coronaNativeDir/Corona/android/lib/Corona"
def coronaNativeMacBinDir = "$coronaNativeDir/Corona/" + platform + "/bin"
if (platform == "win") {
    assetsDir = "$projectDir\\src\\main\\assets"
    jniLibsDir = "$projectDir\\src\\main\\jniLibs"
    coronaNativeSharedDir = "$coronaNativeDir\\Corona\\shared"
    coronaNativeAndroidLibDir = "$coronaNativeDir\\Corona\\android\\lib\\Corona"
    coronaNativeMacBinDir = "$coronaNativeDir\\Corona\\" + platform + "\\bin"
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "$appName"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = file(output.outputFile.getPath().replace('/app-', "/${apkName}-"))
        }
    }
}

task cleanAssets(type: Delete, description: 'remove Corona assets and libcorona.so') {
    //delete "$assetsDir"
    delete "$jniLibsDir"

    doFirst {
        println "== cleanAssets =="
    }

    doLast {
        new File("$assetsDir").mkdirs()
    }
}

task compileLua(type: Exec, description: 'compile Lua source code') {
    executable = "$coronaNativeMacBinDir/lua"
    if (platform == "win")
    {
        executable = "$coronaNativeMacBinDir\\lua.exe"
    }

    workingDir = "$coronaNativeMacBinDir"
    def packagePath = "package.path='$coronaNativeSharedDir/bin/?.lua;$coronaNativeSharedDir/bin/?/init.lua;'..package.path"

    // hmm, Lua does not like '\\'
    packagePath = packagePath.replace("\\","/")

    def compileLua = "$coronaNativeSharedDir/bin/Compile.lua"
    if (platform == "win")
    {
        compileLua = "$coronaNativeSharedDir\\bin\\Compile.lua"
    }

    args = [
            '-e',
            packagePath,
            "$compileLua",
            platform,
            "$coronaNativeDir"
    ]

    def luacpath = "$coronaNativeMacBinDir/?.so"
    if (platform == "win") {
        luacpath = "$coronaNativeMacBinDir\\?.dll"
    }

    def coronaAssetsDir = "$rootDir/../Corona"
    if (platform == "win") {
        coronaAssetsDir = "$rootDir\\..\\Corona"
    }


    environment "LUA_CPATH", "$luacpath"
    environment "TARGET_PLATFORM", 'android'
    environment "PROJECT_DIR", "$rootDir"
    environment "CORONA_COPY_PNG_PRESERVE", '--preserve'
    environment "CONFIGURATION",                'release'
    environment "CORONA_ASSETS_DIR", "$coronaAssetsDir"
    environment "CORONA_TARGET_RESOURCES_DIR", "$assetsDir"
    environment "CORONA_TARGET_EXECUTABLE_DIR", "$assetsDir"

    dependsOn 'cleanAssets'

    doFirst {
        println '== compileLua =='
    }
}

task copyCoronaResources(type: Copy, description: 'include resources from Corona Native') {
    from fileTree(dir: "$coronaNativeAndroidLibDir/res", include: '**/*')
    into "$projectDir/src/main/res"

    dependsOn 'compileLua'

    doFirst {
        println '== copyCoronaResources =='
    }
}

task copyCoronaNativeLibs(type: Copy, description: 'include precompiled libraries from Corona Native') {
    from fileTree(dir: "$coronaNativeAndroidLibDir/libs", include: '**/*.so')
    into "$jniLibsDir"

    dependsOn 'copyCoronaResources'

    doFirst {
        println '== copyCoronaNativeLibs =='
    }
}

task certifyBuild(type: Exec, description: 'certify libcorona.so with resource.car hash and developerkey.cert') {
    executable = "$coronaNativeMacBinDir/CoronaBuilder.app/Contents/MacOS/CoronaBuilder"
    if (platform == "win")
    {
        executable = "$coronaNativeMacBinDir/CoronaBuilder.exe"
    }

    workingDir = "$coronaNativeMacBinDir"

    def developerKey = "$coronaNativeSharedDir/resource/developerkey.cert"
    def resourceCar = "$assetsDir/resource.car"
    def libcoronaSo = "$jniLibsDir/armeabi-v7a/libcorona.so"
    if (platform == "win") {
        developerKey = "$coronaNativeSharedDir\\resource\\developerkey.cert"
        resourceCar = "$assetsDir\\resource.car"
        libcoronaSo = "$jniLibsDir\\armeabi-v7a\\libcorona.so"
    }
    args = [
            'app_sign',
            'sign',
            developerKey,
            resourceCar,
            libcoronaSo,
            'little'
    ]

    dependsOn 'copyCoronaNativeLibs'

    doFirst {
        println '== certifyBuild =='
    }
}

tasks.preBuild.dependsOn('certifyBuild')

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile project(':plugin')
}
